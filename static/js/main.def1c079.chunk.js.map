{"version":3,"sources":["App.js","Form.js","serviceWorker.js","index.js"],"names":["App","Component","getRecipe","axios","url","method","params","app_id","app_key","format","q","state","userInput","imgonly","then","res","console","log","setState","recipeArray","data","hits","handleUserInput","event","target","name","value","handleSubmit","preventDefault","this","className","action","type","onChange","placeholder","onClick","map","recipe","i","key","label","src","image","alt","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kRAqGeA,GCnGKC,Y,8DDUlB,aAAc,IAAD,8BACX,gBAcFC,UAAY,WAIVC,IAAM,CACJC,IAJU,gCAKVC,OAAO,MACPC,OAAO,CACLC,OALO,WAMPC,QAPQ,mCAQRC,OAAO,QACPC,EAAE,EAAKC,MAAMC,UACbC,SAAQ,KAETC,MAAK,SAACC,GACPC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZC,YAAaJ,EAAIK,KAAKC,WAhCf,EAqCbC,gBAAkB,SAACC,GACjB,EAAKL,SAAL,eACGK,EAAMC,OAAOC,KAAOF,EAAMC,OAAOE,SAvCzB,EA2CbC,aAAe,SAACJ,GACd,EAAKrB,YACLqB,EAAMK,iBACJ,EAAKV,SAAS,CACZN,UAAWW,EAAMC,OAAOE,QACvB,kBAAM,EAAKxB,gBA9ChB,EAAKS,MAAQ,CACXQ,YAAY,GACZP,UAAW,IAJF,E,gEAWXiB,KAAK3B,c,+BA2CL,OACE,yBAAK4B,UAAU,OACb,gCACE,yBAAKA,UAAW,WACZ,qCAAU,qCAAV,OACA,2CACA,0BAAMC,OAAO,IACX,2BAAON,KAAM,YAAYO,KAAK,OAAON,MAAOG,KAAKlB,MAAMC,UAAWqB,SAAUJ,KAAKP,gBAAiBY,YAAY,gCAC9G,4BAAQF,KAAK,SAASG,QAAWN,KAAKF,cAAtC,cAGN,wBAAIG,UAAU,cACXD,KAAKlB,MAAMQ,YAAYiB,KAAI,SAACC,EAAOC,GAClC,OACE,wBAAIR,UAAW,kBAAkBS,IAAKD,GACpC,4BAAKD,EAAOA,OAAOG,OACnB,yBAAKC,IAAKJ,EAAOA,OAAOK,MAAOC,IAAKN,EAAOA,OAAOG,QAClD,uBAAGI,KAAMP,EAAOA,OAAOjC,KAAvB,eACA,iDAQV,gCACE,6D,GAlFQH,cECE4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.def1c079.chunk.js","sourcesContent":["import React,{Component} from 'react';\nimport axios from 'axios';\nimport Form from './Form.js'\nimport RecipeDisplay from './RecipeDisplay.js';\n// import swal from '@sweetalert/with-react';\n// // font awsome\n// import { faHome } from \"@fortawesome/free-solid-svg-icons\";\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport './styles/styles.scss';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      recipeArray:[],\n      userInput: ''\n    }\n  }\n\n  \n  // api call\n  componentDidMount(){\n    this.getRecipe();\n  }\n\n  // axios api \n  getRecipe = () => {\n    const url = 'https://api.edamam.com/search';\n    const key = '8fdecc405895d8341b252e3287ad7566';\n    const id = 'dd773a12';\n    axios({\n      url: url,\n      method:'GET',\n      params:{\n        app_id:id,\n        app_key:key,\n        format:'jason',\n        q:this.state.userInput,\n        imgonly:true\n      }\n    }).then((res)=>{\n      console.log(res)\n      this.setState({\n        recipeArray: res.data.hits\n      })\n    })\n  }\n\n  handleUserInput = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n\n  handleSubmit = (event) => {\n    this.getRecipe();\n    event.preventDefault();\n      this.setState({\n        userInput: event.target.value\n      }, () => this.getRecipe())\n    // if (this.state.userInput !== '') {\n    // }\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <header>\n          <div className =\"wrapper\">\n              <h1>COOKS <span>'R'</span> US</h1>\n              <p>What to Cook</p>\n              <form action=\"\">\n                <input name= \"userInput\" type=\"text\" value={this.state.userInput} onChange={this.handleUserInput} placeholder=\"enter an ingredient eg.beef\" />\n                <button type=\"submit\" onClick = {this.handleSubmit}>Find Yum</button>\n              </form>\n          </div>\n          <ul className=\"recipeList\">\n            {this.state.recipeArray.map((recipe,i)=>{\n              return(\n                <li className= \"recipeContainer\" key={i}>\n                  <h2>{recipe.recipe.label}</h2>\n                  <img src={recipe.recipe.image} alt={recipe.recipe.label}/>\n                  <a href={recipe.recipe.url}>Full Recipe</a>\n                  <button>Save it</button>\n                </li>\n              )\n            })}\n\n          </ul>\n  \n        </header>\n        <footer>\n          <p>Copyright Jane Yuan 2020</p>\n        </footer>\n  \n      </div>\n    );\n  }\n}\n\nexport default App;\n"," import React, { Component } from 'react';\r\n\r\n class Form extends Component{\r\n     constructor(){\r\n         super();\r\n         this.state = {\r\n             userInput: ''\r\n         }\r\n     }\r\n    //  \r\n     getUserInput = (event) => {\r\n         this.setState({\r\n             userInput: event.target.value\r\n         })\r\n     }\r\n     render(){\r\n         return(\r\n             <form action=\"\">\r\n                 <input type=\"text\" value={this.state.userInput} onChange={this.getUserInput} placeholder=\"enter an ingredient eg.beef\" />\r\n                 <button type=\"submit\">Find Yum</button>\r\n             </form>\r\n         )\r\n     }\r\n }\r\n\r\n export default Form","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}