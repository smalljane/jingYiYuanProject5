{"version":3,"sources":["FavRecipeDisplay.js","Form.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["FavRecipeDisplay","Component","className","this","props","favRecipes","length","map","recipeItem","i","key","label","src","image","alt","href","url","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","loadFirebase","database","ref","on","response","newFavRecipes","data","val","item","push","setState","getRecipe","axios","method","params","app_id","app_key","format","q","state","userInput","imgonly","then","res","console","log","recipeArray","hits","handleUserInput","event","target","name","value","handleSubmit","preventDefault","addFavRecipe","delFavRecipe","child","remove","action","type","onChange","placeholder","onClick","recipe","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7cab6831.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass FavRecipeDisplay extends Component{\r\n\r\n    render(){\r\n        return(\r\n            <section className=\"favRecipes\">\r\n                <header className =\"favHeader\">\r\n                    <div className = \"wrapper\">\r\n                        <h2>See people's favourite recipes</h2>\r\n                    </div>\r\n                </header>\r\n                <div className=\"wrapper\">\r\n                    {this.props.favRecipes.length < 1 && <p>No Recipes saved yet...</p>}\r\n                    <div>\r\n                        {this.props.favRecipes.map((recipeItem, i)=>{\r\n                            return (\r\n                                <li className=\"recipeContainer\" key={i}>\r\n                                    <h2>{recipeItem.label}</h2>\r\n                                    <img src={recipeItem.image} alt={recipeItem.label} />\r\n                                    <a href={recipeItem.url}>Full Recipe</a>\r\n                                    {/* <button name=\"favButton\" onClick={(event) => { this.addFavRecipe(event, recipeItem) }}>Save it</button> */}\r\n                                </li>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default FavRecipeDisplay"," import React, { Component } from 'react';\r\n\r\n class Form extends Component{\r\n     constructor(){\r\n         super();\r\n         this.state = {\r\n             userInput: ''\r\n         }\r\n     }\r\n    //  \r\n     getUserInput = (event) => {\r\n         this.setState({\r\n             userInput: event.target.value\r\n         })\r\n     }\r\n     render(){\r\n         return(\r\n             <form action=\"\">\r\n                 <input type=\"text\" value={this.state.userInput} onChange={this.getUserInput} placeholder=\"enter an ingredient eg.beef\" />\r\n                 <button type=\"submit\">Find Yum</button>\r\n             </form>\r\n         )\r\n     }\r\n }\r\n\r\n export default Form","import firebase from '../node_modules/firebase/app';\r\nimport 'firebase/database';\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyBIf2eG6SDazTyEL-tXh9Hh4NJ89-XddIA\",\r\n    authDomain: \"project5-recipe.firebaseapp.com\",\r\n    databaseURL: \"https://project5-recipe.firebaseio.com\",\r\n    projectId: \"project5-recipe\",\r\n    storageBucket: \"project5-recipe.appspot.com\",\r\n    messagingSenderId: \"1089325539922\",\r\n    appId: \"1:1089325539922:web:ebf3e1df02bfd85fc3f58b\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase","import React,{Component} from 'react';\nimport axios from 'axios';\nimport Form from './Form.js'\nimport FavRecipeDisplay from './FavRecipeDisplay.js';\nimport firebase from './firebase.js';\n// import swal from '@sweetalert/with-react';\n// // font awsome\n// import { faHome } from \"@fortawesome/free-solid-svg-icons\";\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport './styles/styles.scss';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      recipeArray:[],\n      userInput: '',\n      // addRecipe: true,\n      // removeRecipe: false,\n      favRecipes: []\n    }\n    // this.resultRef = React.createRef();\n  }\n\n  // smooth scroll to result section\n  // smoothScroll = () => {\n  //   let element = this.resultRef.current\n  //   element.scrollIntoView({behavior:'smooth', block:'start'})\n  // }\n  // call functions when component did mount\n  componentDidMount(){\n    this.getRecipe();\n    this.loadFirebase();\n  }\n\n  // firebase data\n  loadFirebase = () => {\n    const dbRef = firebase.database().ref();\n    dbRef.on('value',(response) => {\n      const newFavRecipes = [];\n      const data = response.val();\n\n      for (let item in data) {\n        newFavRecipes.push(data[item]);\n      }\n\n      this.setState({\n        favRecipes: newFavRecipes\n      })\n    })\n  }\n\n\n  // axios api \n  getRecipe = () => {\n    const url = 'https://api.edamam.com/search';\n    const key = '8fdecc405895d8341b252e3287ad7566';\n    const id = 'dd773a12';\n    axios({\n      url: url,\n      method:'GET',\n      params:{\n        app_id:id,\n        app_key:key,\n        format:'jason',\n        q:this.state.userInput,\n        imgonly:true\n      }\n    }).then((res)=>{\n      console.log(res)\n      this.setState({\n        recipeArray: res.data.hits\n      })\n      // this.smoothScroll();\n    })\n  }\n\n  handleUserInput = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n\n  handleSubmit = (event) => {\n    this.getRecipe();\n    event.preventDefault();\n      this.setState({\n        userInput: event.target.value\n      }, () => this.getRecipe())\n    // if (this.state.userInput !== '') {\n    // }\n  }\n\n  // add recipe to favourite list in firbase when click 'save' button\n  addFavRecipe = (event,recipeItem) =>{\n    event.preventDefault();\n    const dbRef = firebase.database().ref()\n    dbRef.push(recipeItem);\n    console.log(recipeItem)\n\n  }\n\n  // function to remove restaurant from favourite list in firebse when click 'delete' button\n  delFavRecipe = (event) =>{\n    event.preventDefault();\n    const dbRef = firebase.database().ref()\n    dbRef.child().remove();\n  }\n\n\n  render(){\n    return (\n      <div className=\"App\">\n        <header className = \"landingHeader\">\n          <div className =\"wrapper\">\n              <h1>COOKS <span>'R'</span> US</h1>\n              <p>What to Cook</p>\n              <form action=\"\">\n                <input name= \"userInput\" type=\"text\" value={this.state.userInput} onChange={this.handleUserInput} placeholder=\"enter an ingredient eg.beef\" />\n                <button type=\"submit\" onClick = {this.handleSubmit}>Find Yum</button>\n              </form>\n          </div>\n        </header>\n        <main>\n          <ul className=\"recipeList\">\n            {this.state.recipeArray.map((recipe,i)=>{\n              let recipeItem = recipe.recipe\n              return(\n                <li className= \"recipeContainer\" key={i}>\n                  <h2>{recipeItem.label}</h2>\n                  <img src={recipeItem.image} alt={recipeItem.label}/>\n                  <a href={recipeItem.url}>Full Recipe</a>\n                  <button name=\"favButton\" onClick = {(event)=>{this.addFavRecipe(event,recipeItem)}}>Save it</button>\n                </li>\n              )\n            })}\n\n          </ul>\n        </main>\n  \n        \n\n        <FavRecipeDisplay \n        favRecipes = {this.state.favRecipes}/>\n        <footer>\n          <p>Copyright Jane Yuan 2020</p>\n        </footer>\n  \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}