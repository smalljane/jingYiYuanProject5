{"version":3,"sources":["FavRecipeDisplay.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["FavRecipeDisplay","className","this","props","favRecipes","length","map","recipeItem","i","recipeName","recipeId","key","label","src","image","alt","href","url","onClick","event","delFavRecipe","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","smoothScroll","resultRef","current","scrollIntoView","behavior","block","loadFirebase","database","ref","on","response","newFavRecipes","data","val","push","setState","getRecipe","axios","method","params","app_id","app_key","format","q","state","userInput","imgonly","then","res","recipeArray","hits","handleUserInput","target","name","value","handleSubmit","preventDefault","alert","addFavRecipe","child","remove","React","createRef","action","type","onChange","placeholder","required","recipe","aria-hidden","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8d9abba4.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass FavRecipeDisplay extends Component{\r\n\r\n    render(){\r\n        return(\r\n            <section className=\"favRecipes\">\r\n                <header className =\"favHeader\">\r\n                    <div className = \"wrapper\">\r\n                        <h2>people's favourite recipes</h2>\r\n                    </div>\r\n                </header>\r\n                <div className=\"wrapper\">\r\n                    {this.props.favRecipes.length < 1 && <p>No Recipes saved yet...</p>}\r\n                    <ul className=\"favRecipeList\">\r\n                        {this.props.favRecipes.map((recipeItem, i)=>{\r\n                            let recipeName = recipeItem.recipeName\r\n                            let recipeId = recipeItem.recipeId\r\n                            return (\r\n                                <li className=\"favRecipeContainer\" key={i}>\r\n                                    <h3>{recipeName.label}</h3>\r\n                                    <img src={recipeName.image} alt={recipeName.label} />\r\n                                    <div>\r\n                                        <a href={recipeName.url}>Full Recipe</a>\r\n                                        <button className=\"delButton\" onClick={(event) => {this.props.delFavRecipe(event, recipeId) }}>Delete</button>\r\n                                    </div>\r\n                                </li>\r\n                            )\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default FavRecipeDisplay","import firebase from '../node_modules/firebase/app';\r\nimport 'firebase/database';\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyBIf2eG6SDazTyEL-tXh9Hh4NJ89-XddIA\",\r\n    authDomain: \"project5-recipe.firebaseapp.com\",\r\n    databaseURL: \"https://project5-recipe.firebaseio.com\",\r\n    projectId: \"project5-recipe\",\r\n    storageBucket: \"project5-recipe.appspot.com\",\r\n    messagingSenderId: \"1089325539922\",\r\n    appId: \"1:1089325539922:web:ebf3e1df02bfd85fc3f58b\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase","import React,{Component} from 'react';\nimport axios from 'axios';\nimport FavRecipeDisplay from './FavRecipeDisplay.js';\nimport firebase from './firebase.js';\nimport './styles/styles.scss';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      recipeArray:[],\n      userInput: '',\n      favRecipes: []\n    }\n    this.resultRef = React.createRef();\n  }\n\n  // smooth scroll to result section\n  smoothScroll = () => {\n    let element = this.resultRef.current\n    element.scrollIntoView({behavior:'smooth', block:'start'})\n  }\n  // call functions when component did mount\n  componentDidMount(){\n    this.getRecipe();\n    // firebase call to retrieve data when compnent did mount\n    this.loadFirebase();\n  }\n\n  // firebase data\n  loadFirebase = () => {\n    const dbRef = firebase.database().ref();\n    dbRef.on('value',(response) => {\n      const newFavRecipes = [];\n      const data = response.val();\n\n      for (let key in data) {\n        newFavRecipes.push({recipeName:data[key], recipeId:key});\n      }\n\n      this.setState({\n        favRecipes: newFavRecipes\n      })\n    })\n  }\n\n  // axios call to edamam api to retrieve recipe data based on user input\n  getRecipe = () => {\n    const url = 'https://api.edamam.com/search';\n    const key = '8fdecc405895d8341b252e3287ad7566';\n    const id = 'dd773a12';\n    axios({\n      url: url,\n      method:'GET',\n      params:{\n        app_id:id,\n        app_key:key,\n        format:'jason',\n        q:this.state.userInput,\n        imgonly:true\n      }\n    }).then((res)=>{\n      // return an object that holds recipes data\n      this.setState({\n        recipeArray: res.data.hits\n      })\n      // smooth scroll to result page once API call is made\n      if (this.state.recipeArray.length > 0){\n        this.smoothScroll();\n      }\n    })\n  }\n\n  \n  handleUserInput = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n\n  // update userInput value when user hit enter/submit button and call API function\n  handleSubmit = (event) => {\n    this.getRecipe();\n    event.preventDefault();\n      this.setState({\n        userInput: event.target.value\n      }, () => this.getRecipe())\n      if (this.state.userInput == '') {\n        alert('please enter an ingredient')\n      }\n  }\n\n  // add recipe to favourite list in firbase when click 'save' button\n  addFavRecipe = (event,recipeItem) =>{\n    event.preventDefault();\n    const dbRef = firebase.database().ref()\n    dbRef.push(recipeItem);\n  }\n\n  // function to remove restaurant from favourite list in firebse when click 'delete' button\n  delFavRecipe = (event,recipeId) =>{\n    event.preventDefault();\n    const dbRef = firebase.database().ref()\n    dbRef.child(recipeId).remove();\n  }\n\n\n  render(){\n    return (\n      <div className=\"App\">\n        <header className = \"landingHeader\">\n          <div className = \"backgroundColor\">\n            {/* landing page */}\n            <div className =\"wrapper headerContent\">\n                <h1>COOKS <span>'R'</span> US</h1>\n                <p>What to Cook</p>\n                {/* user input and search button*/}\n                <form action=\"\">\n                  <input name=\"userInput\" type=\"text\" value={this.state.userInput} onChange={this.handleUserInput} placeholder=\"enter an ingredient eg.egg\" required=\"true\" />\n                  <button name =\"search\"className=\"submitButton\" type=\"submit\" onClick = {this.handleSubmit}>Find Yum</button>\n                </form>\n            </div>\n          </div>\n        </header>\n        <main ref={this.resultRef}>\n          {/* map out each recipes in the recipe array */}   \n          <ul className=\"wrapper recipeList\">\n            {this.state.recipeArray.map((recipe,i)=>{\n              let recipeItem = recipe.recipe\n              return(\n                <li className= \"recipeContainer\" key={i}>\n                  <h2>{recipeItem.label}</h2>\n                  <img src={recipeItem.image} alt={recipeItem.label}/>\n                  <div>\n                    <a href={recipeItem.url}>Full Recipe</a>\n                    <button className=\"favButton\" onClick = {(event)=>{this.addFavRecipe(event,recipeItem)}}>Save it</button>\n                  </div>\n                </li>\n              )\n            })}\n\n          </ul>\n        </main>\n        {/* Favourite recipes page */}\n        <FavRecipeDisplay \n        favRecipes = {this.state.favRecipes}\n        delFavRecipe = {this.delFavRecipe}/>\n{/* ----------------------------------------Footer----------------------------------- */}\n        <footer>\n          <p>Copyright <span aria-hidden=\"true\">&copy;</span> 2020 by <a href=\"https://www.itsjaneyuan.com\" target=\"_blank\">Jane Yuan</a></p>\n        </footer>\n  \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}